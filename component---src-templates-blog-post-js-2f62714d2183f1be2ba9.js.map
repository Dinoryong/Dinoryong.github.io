{"version":3,"sources":["webpack:///./src/components/Tags/index.js","webpack:///./src/components/PostsGrid/index.js","webpack:///./src/templates/blog-post.js"],"names":["Tags","tags","className","map","tag","to","PostsGrid","posts","post","frontmatter","thumbnail","date","postTitle","title","slug","fields","key","itemProp","itemScope","itemType","src","alt","BlogPostTemplate","data","location","markdownRemark","siteTitle","site","siteMetadata","previous","next","more","excerpt","html","description","keywords","dangerouslySetInnerHTML","__html","style","display","flexWrap","justifyContent","listStyle","padding","rel","nodes"],"mappings":"2FAAA,+CAkBeA,IAbF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACX,6BAASC,UAAU,mBAChBD,EAAKE,KAAI,SAACC,GAAD,OACR,kBAAC,OAAD,CACEC,GAAE,SAAWD,EACbF,UAAU,cAETE,S,yDCZT,2DA4CeE,IArCG,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAChB,oCACE,yBAAKL,UAAU,iBACb,4CACA,kBAAC,OAAD,CAAMG,GAAG,SAAT,aAEF,wBAAIH,UAAU,cACXK,EAAMJ,KAAI,SAACK,GAAU,IAAD,EAKfA,EAHFC,YACEC,EAHe,EAGfA,UAAWT,EAHI,EAGJA,KAAMU,EAHF,EAGEA,KAAaC,EAHf,EAGQC,MACZC,EACXN,EADCO,OAAUD,KAEf,OACE,wBAAIE,IAAKF,EAAMZ,UAAU,cACvB,kBAAC,OAAD,CAAMG,GAAIS,EAAMG,SAAS,OACvB,6BACEC,WAAS,EACTC,SAAS,6BAET,yBAAKC,IAAKV,EAAWW,IAAI,KACzB,gCACE,wBAAInB,UAAU,oBACXU,GAEH,+BAAQD,IAEV,kBAAC,IAAD,CAAMV,KAAMA,c,yDClC5B,gFAqFeqB,UA9EU,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAEdhB,EAKde,EALFE,eAC+BC,EAI7BH,EAJFI,KAAQC,aAAgBf,MACxBgB,EAGEN,EAHFM,SACAC,EAEEP,EAFFO,KACAC,EACER,EADFQ,KAIAC,EAQExB,EARFwB,QACAC,EAOEzB,EAPFyB,KAX6C,EAkB3CzB,EANFC,YACEI,EAb2C,EAa3CA,MACAqB,EAd2C,EAc3CA,YACAvB,EAf2C,EAe3CA,KACAV,EAhB2C,EAgB3CA,KAIJ,OACE,kBAAC,IAAD,CAAQuB,SAAUA,EAAUX,MAAOa,GACjC,kBAAC,IAAD,CACEb,MAAOA,EACPsB,SAAUlC,EACViC,YAAaA,GAAeF,IAE9B,6BACE9B,UAAU,YACVgB,WAAS,EACTC,SAAS,6BAET,gCACE,wBAAIF,SAAS,YAAYJ,GACzB,2BAAIF,IAEN,6BAEEyB,wBAAyB,CAAEC,OAAQJ,GACnChB,SAAS,gBAEX,8BAEF,yBAAKf,UAAU,iBACb,wBACEoC,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAGX,4BACGd,GACC,kBAAC,OAAD,CAAMxB,GAAIwB,EAASd,OAAOD,KAAM8B,IAAI,QAApC,IAEG,IACAf,EAASpB,YAAYI,QAI5B,4BACGiB,GACC,kBAAC,OAAD,CAAMzB,GAAIyB,EAAKf,OAAOD,KAAM8B,IAAI,QAC7Bd,EAAKrB,YAAYI,MACjB,IAFH,QASR,kBAAC,IAAD,CAAWN,MAAOwB,EAAKc","file":"component---src-templates-blog-post-js-2f62714d2183f1be2ba9.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'gatsby';\r\n\r\nimport './style.scss';\r\n\r\nconst Tags = ({ tags }) => (\r\n  <section className=\"tags__container\">\r\n    {tags.map((tag) => (\r\n      <Link\r\n        to={`/tags/${tag}`}\r\n        className=\"tags__link\"\r\n      >\r\n        {tag}\r\n      </Link>\r\n    ))}\r\n  </section>\r\n);\r\n\r\nexport default Tags;\r\n","import React from 'react';\r\nimport { Link } from 'gatsby';\r\n\r\nimport Tags from '../Tags';\r\n\r\nimport './style.scss';\r\n\r\nconst PostsGrid = ({ posts }) => (\r\n  <>\r\n    <div className=\"post__section\">\r\n      <h4>Latest Blogs</h4>\r\n      <Link to=\"/blog\">View All</Link>\r\n    </div>\r\n    <ol className=\"post__grid\">\r\n      {posts.map((post) => {\r\n        const {\r\n          frontmatter: {\r\n            thumbnail, tags, date, title: postTitle,\r\n          }, fields: { slug },\r\n        } = post;\r\n        return (\r\n          <li key={slug} className=\"post__item\">\r\n            <Link to={slug} itemProp=\"url\">\r\n              <article\r\n                itemScope\r\n                itemType=\"http://schema.org/Article\"\r\n              >\r\n                <img src={thumbnail} alt=\"\" />\r\n                <header>\r\n                  <h4 className=\"post__item-title\">\r\n                    {postTitle}\r\n                  </h4>\r\n                  <small>{date}</small>\r\n                </header>\r\n                <Tags tags={tags} />\r\n              </article>\r\n            </Link>\r\n          </li>\r\n        );\r\n      })}\r\n    </ol>\r\n  </>\r\n);\r\n\r\nexport default PostsGrid;\r\n","import React from 'react';\r\nimport { Link, graphql } from 'gatsby';\r\n\r\nimport Layout from '../components/Layout';\r\nimport SEO from '../components/seo';\r\nimport PostsGrid from '../components/PostsGrid';\r\n\r\nconst BlogPostTemplate = ({ data, location }) => {\r\n  const {\r\n    markdownRemark: post,\r\n    site: { siteMetadata: { title: siteTitle } },\r\n    previous,\r\n    next,\r\n    more,\r\n  } = data;\r\n\r\n  const {\r\n    excerpt,\r\n    html,\r\n    frontmatter: {\r\n      title,\r\n      description,\r\n      date,\r\n      tags,\r\n    },\r\n  } = post;\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <SEO\r\n        title={title}\r\n        keywords={tags}\r\n        description={description || excerpt}\r\n      />\r\n      <article\r\n        className=\"blog-post\"\r\n        itemScope\r\n        itemType=\"http://schema.org/Article\"\r\n      >\r\n        <header>\r\n          <h1 itemProp=\"headline\">{title}</h1>\r\n          <p>{date}</p>\r\n        </header>\r\n        <section\r\n          // eslint-disable-next-line react/no-danger\r\n          dangerouslySetInnerHTML={{ __html: html }}\r\n          itemProp=\"articleBody\"\r\n        />\r\n        <hr />\r\n      </article>\r\n      <nav className=\"blog-post-nav\">\r\n        <ul\r\n          style={{\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            justifyContent: 'space-between',\r\n            listStyle: 'none',\r\n            padding: 0,\r\n          }}\r\n        >\r\n          <li>\r\n            {previous && (\r\n              <Link to={previous.fields.slug} rel=\"prev\">\r\n                ←\r\n                {' '}\r\n                {previous.frontmatter.title}\r\n              </Link>\r\n            )}\r\n          </li>\r\n          <li>\r\n            {next && (\r\n              <Link to={next.fields.slug} rel=\"next\">\r\n                {next.frontmatter.title}\r\n                {' '}\r\n                →\r\n              </Link>\r\n            )}\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <PostsGrid posts={more.nodes} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default BlogPostTemplate;\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogPostBySlug(\r\n    $id: String!\r\n    $previousPostId: String\r\n    $nextPostId: String\r\n  ) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    markdownRemark(id: { eq: $id }) {\r\n      id\r\n      excerpt(pruneLength: 160)\r\n      html\r\n      frontmatter {\r\n        title\r\n        date(formatString: \"MMMM DD, YYYY\")\r\n        description\r\n        tags\r\n      }\r\n    }\r\n    more: allMarkdownRemark(\r\n      limit: 3, \r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n    ) {\r\n      nodes {\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          date(formatString: \"MMMM DD, YYYY\")\r\n          title\r\n          description\r\n          tags\r\n          thumbnail\r\n        }\r\n      }\r\n    }\r\n    previous: markdownRemark(id: { eq: $previousPostId }) {\r\n      fields {\r\n        slug\r\n      }\r\n      frontmatter {\r\n        title\r\n      }\r\n    }\r\n    next: markdownRemark(id: { eq: $nextPostId }) {\r\n      fields {\r\n        slug\r\n      }\r\n      frontmatter {\r\n        title\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}