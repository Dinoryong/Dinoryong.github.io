{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-11-09-calling-javascript-code-from-c-c-using-webassembly/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Peach"}},"markdownRemark":{"id":"a38d821d-3fad-5c0f-adab-09f12a18b51c","excerpt":"In the last blog post, we talked about calling C/C++ code from JavaScript using WebAssembly and Emscripten. Today, we will be discussing how to learn python…","html":"<p>In the last blog post, we talked about <a href=\"https://thecodedose.com/blog/loading-webassembly-modules-in-javascript\">calling C/C++ code from JavaScript using WebAssembly and Emscripten</a>. Today, we will be discussing how to learn python language by studying algorithms</p>\n<h1>Using the import object</h1>\n<p>Remember how we passed an import object to instantiate our WebAssembly modules last time? Today, we will be talking about it in more detail.</p>\n<p><strong><em>importObject</em></strong>(Optional)</p>\n<blockquote>\n<p>An object containing the values to be imported into the newly-created <code class=\"language-text\">Instance</code>, such as functions or <code class=\"language-text\">WebAssembly.Memory</code> objects. There must be one matching property for each declared import of the compiled module or else a <code class=\"language-text\">WebAssembly.LinkError</code> is thrown.</p>\n</blockquote>\n<p>We will be passing our JavaScript function in the env argument of the importObject. Building on our example from last time —</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Simple template<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token keyword\">const</span> importObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        env<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          consoleLog<span class=\"token operator\">:</span> console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'main.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        importObject\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> Sum <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>Sum<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Here, we have passed the <code class=\"language-text\">console.log</code> function to my WebAssembly module. Our C++ program will receive <code class=\"language-text\">console.log</code>and call it by calling <code class=\"language-text\">consoleLog</code>. You can write and pass your own functions as well.</p>\n<h2>Calling imported functions in C/C++</h2>\n<p>In our C++ file, we need to define the consoleLog function that it will receive from JavaScript. The function signature must match what you passed in. <code class=\"language-text\">Sum</code> is the function we have exported to JavaScript and are using above in our index.html file as <code class=\"language-text\">result.instance.exports.Sum</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Wrapper for our JavaScript function</span>\n  <span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">consoleLog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">int</span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">consoleLog</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">em++ -std=c++11 main.cc -Os -s WASM=1 -s SIDE_MODULE=1 -o main.wasm</code></p>\n<p>When we call the C++ <code class=\"language-text\">Sum</code> function in our JavaScript code, it will log the result to the console before returning it.</p>\n<h1>Using Emscripten</h1>\n<p>We will be discussing the following two approaches for calling JavaScript code from C/C++ —</p>\n<ul>\n<li>Running a script using emscripten<em>run</em>script()<strong><em>(slower)</em></strong></li>\n<li>Writing inline JavaScript<strong><em>(faster)</em></strong></li>\n</ul>\n<h2>Using emscripten<em>run</em>script()</h2>\n<p><strong>void</strong> <code class=\"language-text\">emscripten_run_script</code><strong>(const char<em>\\</em>script*)</strong>is the most direct way of calling JavaScript from C/C++. It effectively runs the code using<code class=\"language-text\">eval()</code>which is a JavaScript function that evaluates code represented as a string. It is suited for purposes such as debugging but for better performance, you should write JavaScript “inline”.</p>\n<p><code class=\"language-text\">emscripten_run_script(&quot;console.log(&#39;hello world&#39;)&quot;);</code></p>\n<p>You can also use <code class=\"language-text\">emscripten_run_script_int</code> if the result of the evaluation returns an int or <code class=\"language-text\">emscripten_run_script_string</code> if the evaluation returns a string.</p>\n<h2>Using Inline JavaScript</h2>\n<p>A faster way is to write “inline JavaScript”, using <code class=\"language-text\">EM_JS()</code> or <code class=\"language-text\">EM_ASM()</code> (and related macros).</p>\n<p><code class=\"language-text\">EM_ASM</code></p>\n<p>This allows you to declare JavaScript in your C code “inline”. The JavaScript code is executed immediately and cannot be reused within the C/C++ file in which it is contained.</p>\n<p>Arguments of type int or double can be passed into the JavaScript code block where they arrive as variables $0, $1, and so on. It can also return values back. You need to specify if the return value is an <code class=\"language-text\">int</code> or a <code class=\"language-text\">double</code> using the appropriate macro <code class=\"language-text\">EM_ASM_INT</code>or<code class=\"language-text\">EM_ASM_DOUBLE</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;emscripten/emscripten.h></span></span>\n\n<span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token punctuation\">{</span>\n  EMSCRIPTEN_KEEPALIVE <span class=\"token keyword\">int</span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">EM_ASM_INT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>$<span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> $<span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">em++ -std=c++11 main.cc -O3 -s WASM=1 -o main.wasm -o main.js -s EXTRA_EXPORTED_RUNTIME_METHODS=&#39;[&quot;cwrap&quot;]&#39;</code></p>\n<p>When compiled and run, Emscripten will execute the lines of JavaScript enclosed in the EM_ASM block as if they appeared directly in the generated code.</p>\n<blockquote>\n<p>Note, however, that under the hood Emscripten still does a function call even in this case, which has some amount of overhead.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Simple template<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      Module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onRuntimeInitialized</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> Sum <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">cwrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Sum'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The above example will actually end up logging the results of the<code class=\"language-text\">Sum</code>function twice, once through EM<em>ASM</em>INT() and the other time through our index.html.</p>\n<p><code class=\"language-text\">EM_JS</code><strong>(return<em>type, function</em>name, argument, code)</strong></p>\n<p>If you want your JavaScript to be reusable in C++ as a function, you can use EM_JS instead which creates a wrapper for the JavaScript code and lets us execute it like a normal C/C++ function.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;emscripten/emscripten.h></span></span>\n\n  <span class=\"token function\">EM_JS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span> console_log_int<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Printing from C++:\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token punctuation\">{</span>\n\n  EMSCRIPTEN_KEEPALIVE <span class=\"token keyword\">int</span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">console_log_int</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can read more about these macros <a href=\"https://emscripten.org/docs/api_reference/emscripten.h.html\">here</a>.</p>\n<p>You can also call JavaScript functions as function pointers from C as well as implement a C API in JavaScript where you can define the interface in C and implement the API in JavaScript.</p>\n<p>You can also use <a href=\"https://emscripten.org/docs/porting/connecting_cpp_and_javascript/WebIDL-Binder.html#webidl-binder\">WebIDL Binder</a> and <a href=\"https://emscripten.org/docs/porting/connecting_cpp_and_javascript/embind.html#embind\">Embind</a> to create bindings between C++ and JavaScript, allowing C++ code entities to be used in a natural manner from JavaScript.<em>Embind</em>additionally supports calling JavaScript code from C++. However, today we will not be discussing them but you can always learn more about it on Emscripten’s website!</p>","frontmatter":{"title":"Learning Python language by Algorithms","date":"April 14, 2021","description":null,"tags":["algorithms","data structures","python"]}},"more":{"nodes":[{"fields":{"slug":"/2020-11-09-calling-javascript-code-from-c-c-using-webassembly/"},"frontmatter":{"date":"April 14, 2021","title":"Learning Python language by Algorithms","description":null,"tags":["algorithms","data structures","python"],"thumbnail":"/images/pexels-flickr-149767.jpg"}},{"fields":{"slug":"/2020-11-09-calling-javascript-code-from-c-c-using-webassembly copy/"},"frontmatter":{"date":"November 09, 2020","title":"Calling JavaScript code from C/C++ using WebAssembly","description":null,"tags":["javascript","webassembly","emscripten","c++","c"],"thumbnail":"/images/pexels-flickr-149767.jpg"}},{"fields":{"slug":"/2020-11-05-reactjs-guide-how-to-learn-react-as-a-complete-beginner/"},"frontmatter":{"date":"November 05, 2020","title":"ReactJS Guide: How to learn React as a complete beginner?","description":null,"tags":["javascript","beginner","react","roadmap"],"thumbnail":"/images/pexels-cottonbro-4065894.jpg"}}]},"previous":{"fields":{"slug":"/2020-11-09-calling-javascript-code-from-c-c-using-webassembly copy/"},"frontmatter":{"title":"Calling JavaScript code from C/C++ using WebAssembly"}},"next":null},"pageContext":{"id":"a38d821d-3fad-5c0f-adab-09f12a18b51c","previousPostId":"c7299f88-e41b-522b-b978-6e51bab4f098","nextPostId":null}},"staticQueryHashes":["1713152521","2841359383"]}